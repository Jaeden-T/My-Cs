"use strict";(self.webpackChunkcs=self.webpackChunkcs||[]).push([[193],{3905:(r,e,n)=>{n.d(e,{Zo:()=>c,kt:()=>d});var t=n(7294);function a(r,e,n){return e in r?Object.defineProperty(r,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):r[e]=n,r}function o(r,e){var n=Object.keys(r);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(r);e&&(t=t.filter((function(e){return Object.getOwnPropertyDescriptor(r,e).enumerable}))),n.push.apply(n,t)}return n}function i(r){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(Object(n),!0).forEach((function(e){a(r,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(r,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(e){Object.defineProperty(r,e,Object.getOwnPropertyDescriptor(n,e))}))}return r}function s(r,e){if(null==r)return{};var n,t,a=function(r,e){if(null==r)return{};var n,t,a={},o=Object.keys(r);for(t=0;t<o.length;t++)n=o[t],e.indexOf(n)>=0||(a[n]=r[n]);return a}(r,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(r);for(t=0;t<o.length;t++)n=o[t],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(r,n)&&(a[n]=r[n])}return a}var p=t.createContext({}),l=function(r){var e=t.useContext(p),n=e;return r&&(n="function"==typeof r?r(e):i(i({},e),r)),n},c=function(r){var e=l(r.components);return t.createElement(p.Provider,{value:e},r.children)},y={inlineCode:"code",wrapper:function(r){var e=r.children;return t.createElement(t.Fragment,{},e)}},u=t.forwardRef((function(r,e){var n=r.components,a=r.mdxType,o=r.originalType,p=r.parentName,c=s(r,["components","mdxType","originalType","parentName"]),u=l(n),d=a,m=u["".concat(p,".").concat(d)]||u[d]||y[d]||o;return n?t.createElement(m,i(i({ref:e},c),{},{components:n})):t.createElement(m,i({ref:e},c))}));function d(r,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof r||a){var o=n.length,i=new Array(o);i[0]=u;var s={};for(var p in e)hasOwnProperty.call(e,p)&&(s[p]=e[p]);s.originalType=r,s.mdxType="string"==typeof r?r:a,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return t.createElement.apply(null,i)}return t.createElement.apply(null,n)}u.displayName="MDXCreateElement"},9065:(r,e,n)=>{n.r(e),n.d(e,{assets:()=>p,contentTitle:()=>i,default:()=>y,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var t=n(7462),a=(n(7294),n(3905));const o={sidebar_position:1,description:"Arrays",title:"Array Basics",id:"python-arrays-basics"},i=void 0,s={unversionedId:"python/Arrays/python-arrays-basics",id:"python/Arrays/python-arrays-basics",title:"Array Basics",description:"Arrays",source:"@site/docs/python/Arrays/basics.md",sourceDirName:"python/Arrays",slug:"/python/Arrays/python-arrays-basics",permalink:"/My-Cs/docs/python/Arrays/python-arrays-basics",draft:!1,editUrl:"https://github.com/Jaeden-T/My-Cs/edit/master/docs/python/Arrays/basics.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,description:"Arrays",title:"Array Basics",id:"python-arrays-basics"},sidebar:"myAutogeneratedSidebar",previous:{title:"Adding Information to an Array",permalink:"/My-Cs/docs/python/Arrays/python-arrays-append"},next:{title:"Functions-vs-Procedures",permalink:"/My-Cs/docs/python/Functions-vs-Procedures"}},p={},l=[{value:"Array Position Numbers",id:"array-position-numbers",level:2},{value:"Printing from 1d arrays:",id:"printing-from-1d-arrays",level:2},{value:"Printing things from 2d arrays",id:"printing-things-from-2d-arrays",level:2}],c={toc:l};function y(r){let{components:e,...n}=r;return(0,a.kt)("wrapper",(0,t.Z)({},c,n,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Arrays technically known as lists in python but we will call then arrays for now."),(0,a.kt)("p",null,"For arrays we have 1D and 2D arrays and they look something like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},'\narray1d = ["Apple", "banana", "Rice"]\n\narray2d= [["Apple", "Banna", "Rice"], ["BANNA", "Banna", "Rice"], ["Apple", "Apple", "Rice"]]\n')),(0,a.kt)("p",null,"As we can see a 1d array is just 1 dimensional (only have 1 axis) on its own while a 2d array is multiple arrays in an array forming a table like structure which leads to it having 2 axises."),(0,a.kt)("h2",{id:"array-position-numbers"},"Array Position Numbers"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},'array1d = ["Apple", "Banna", "Rice", "cake", "Fish"]\n')),(0,a.kt)("p",null,"Apple is position 0\nBanna is position 1\nRice is position 2 so on and so forth"),(0,a.kt)("p",null,"For 2d arrays we have rows and columns. Rows count from 0 onwards (downwards) column from 0 onwards (left to right)"),(0,a.kt)("h2",{id:"printing-from-1d-arrays"},"Printing from 1d arrays:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},'array1d = ["Apple", "Banna", "Rice"]\n\nprint(array1d[0])\n')),(0,a.kt)("h2",{id:"printing-things-from-2d-arrays"},"Printing things from 2d arrays"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},'\narray2d = [["a", "b", "c"], ["d", "e", "f"], ["g", "h", "i"]]\n\nprint(array2d[0][1]) #Specficly the row number than the column number\n#0 is row 0 (the one that contains a b c)\n#1 is collem 1 (letter "b")\n')))}y.isMDXComponent=!0}}]);